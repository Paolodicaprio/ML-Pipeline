"""
Script pour d√©ployer un mod√®le de machine learning bas√© sur v_best.
"""
import os
import sys
import json
import shutil
import logging
import datetime

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def load_comparison_report():
    """Charge le rapport de comparaison des mod√®les."""
    try:
        with open("build/comparison_report.json", 'r') as f:
            comparison_report = json.load(f)
        
        return comparison_report
    except Exception as e:
        logger.error(f"Erreur lors du chargement du rapport de comparaison: {e}")
        sys.exit(1)

def check_v_best_exists():
    """V√©rifie si un mod√®le v_best existe."""
    v_best_path = "deploy/v_best"
    required_files = ["model.pkl", "model_metadata.json", "evaluation_report.json"]
    
    if not os.path.exists(v_best_path):
        return False
    
    for file in required_files:
        if not os.path.exists(os.path.join(v_best_path, file)):
            return False
    
    return True

def deploy_from_v_best():
    """D√©ploie le mod√®le depuis le conteneur v_best."""
    try:
        # V√©rifier que v_best existe
        if not check_v_best_exists():
            logger.error("Aucun mod√®le v_best trouv√© pour le d√©ploiement")
            return False
        
        # Cr√©er le r√©pertoire de d√©ploiement principal s'il n'existe pas
        os.makedirs("deploy", exist_ok=True)
        
        # Copier les fichiers depuis v_best vers le r√©pertoire de d√©ploiement principal
        v_best_files = [
            "model.pkl",
            "model_metadata.json", 
            "evaluation_report.json",
            "model_config.yml"
        ]
        
        for file in v_best_files:
            src_path = os.path.join("deploy/v_best", file)
            dst_path = os.path.join("deploy", file)
            
            if os.path.exists(src_path):
                shutil.copy(src_path, dst_path)
                logger.info(f"Copi√© {file} depuis v_best vers deploy/")
        
        # Cr√©er un fichier d'information sur le d√©ploiement
        deployment_info = {
            'deployment_timestamp': datetime.datetime.now().isoformat(),
            'deployed_from': 'v_best',
            'deployed_from_commit': os.environ.get('GITHUB_SHA', 'local_deployment'),
            'deployed_by': os.environ.get('GITHUB_ACTOR', 'local_user')
        }
        
        # Charger les m√©tadonn√©es v_best pour obtenir des informations suppl√©mentaires
        v_best_metadata_path = "deploy/v_best/v_best_metadata.json"
        if os.path.exists(v_best_metadata_path):
            with open(v_best_metadata_path, 'r') as f:
                v_best_metadata = json.load(f)
            deployment_info['v_best_commit_id'] = v_best_metadata.get('commit_id', 'unknown')
            deployment_info['v_best_timestamp'] = v_best_metadata.get('timestamp', 'unknown')
        
        with open("deploy/deployment_info.json", 'w') as f:
            json.dump(deployment_info, f, indent=2)
            
        logger.info("üöÄ Mod√®le d√©ploy√© avec succ√®s depuis v_best")
        return True
        
    except Exception as e:
        logger.error(f"Erreur lors du d√©ploiement depuis v_best: {e}")
        return False

def deploy_current_model():
    """D√©ploie le mod√®le actuel (fallback si v_best n'existe pas)."""
    try:
        # Cr√©er un r√©pertoire de d√©ploiement si n√©cessaire
        os.makedirs("deploy", exist_ok=True)
        
        # Copier le mod√®le dans le r√©pertoire de d√©ploiement
        shutil.copy("build/model.pkl", "deploy/model.pkl")
        
        # Copier les m√©tadonn√©es du mod√®le
        shutil.copy("build/model_metadata.json", "deploy/model_metadata.json")
        
        # Copier le rapport d'√©valuation
        shutil.copy("build/evaluation_report.json", "deploy/evaluation_report.json")
        
        # Cr√©er un fichier d'information sur le d√©ploiement
        deployment_info = {
            'deployment_timestamp': datetime.datetime.now().isoformat(),
            'deployed_from': 'current_build',
            'deployed_from_commit': os.environ.get('GITHUB_SHA', 'local_deployment'),
            'deployed_by': os.environ.get('GITHUB_ACTOR', 'local_user'),
            'note': 'Deployed current model as no v_best was available'
        }
        
        with open("deploy/deployment_info.json", 'w') as f:
            json.dump(deployment_info, f, indent=2)
            
        logger.info("üöÄ Mod√®le actuel d√©ploy√© (aucun v_best disponible)")
        return True
        
    except Exception as e:
        logger.error(f"Erreur lors du d√©ploiement du mod√®le actuel: {e}")
        return False

def main():
    """Fonction principale pour d√©ployer le mod√®le."""
    try:
        # Charger le rapport de comparaison
        comparison_report = load_comparison_report()
        
        # Toujours d√©ployer depuis v_best si disponible
        if check_v_best_exists():
            success = deploy_from_v_best()
            
            if success:
                # Afficher des informations sur le mod√®le d√©ploy√©
                with open("deploy/v_best/v_best_metadata.json", 'r') as f:
                    v_best_metadata = json.load(f)
                
                logger.info(f"üìä Mod√®le v_best d√©ploy√©:")
                logger.info(f"   - Version: {v_best_metadata['model_info']['model_version']}")
                logger.info(f"   - Type: {v_best_metadata['model_info']['model_type']}")
                logger.info(f"   - Commit: {v_best_metadata['commit_id'][:8]}...")
                logger.info(f"   - M√©triques: {v_best_metadata['metrics']}")
                
                if comparison_report.get('is_new_v_best', False):
                    logger.info("‚ú® Ce d√©ploiement utilise le nouveau mod√®le v_best")
                else:
                    logger.info("üì¶ Ce d√©ploiement utilise le mod√®le v_best existant")
                    
            else:
                logger.error("√âchec du d√©ploiement depuis v_best")
                sys.exit(1)
        else:
            # Fallback: d√©ployer le mod√®le actuel
            logger.warning("Aucun mod√®le v_best trouv√©, d√©ploiement du mod√®le actuel")
            success = deploy_current_model()
            
            if not success:
                logger.error("√âchec du d√©ploiement du mod√®le actuel")
                sys.exit(1)
        
        logger.info("D√©ploiement termin√© avec succ√®s")
            
    except Exception as e:
        logger.error(f"Erreur lors du d√©ploiement du mod√®le: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()